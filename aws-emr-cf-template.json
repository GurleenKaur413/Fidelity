AWSTemplateFormatVersion: 2010-09-09
Description: EMR Cluster (Spark + PySpark) with roles auto-created if not supplied

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC ID
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Existing Subnet ID
  ClusterName:
    Type: String
    Default: Spark-On-EMR
    Description: EMR Cluster name
  UseExistingRoles:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: "Set to true if you want to use existing roles instead of creating new"

  ExistingServiceRole:
    Type: String
    Default: ""
    Description: Existing EMR service role (if UseExistingRoles=true)
  ExistingInstanceProfile:
    Type: String
    Default: ""
    Description: Existing EMR EC2 InstanceProfile (if UseExistingRoles=true)

Conditions:
  CreateRoles: !Equals [!Ref UseExistingRoles, "false"]

Resources:
  # ----------- EMR SERVICE ROLE ------------
  EMRServiceRole:
    Type: AWS::IAM::Role
    Condition: CreateRoles
    Properties:
      RoleName: EMR_DefaultRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

  # ----------- EMR EC2 ROLE + PROFILE ------------
  EMREC2Role:
    Type: AWS::IAM::Role
    Condition: CreateRoles
    Properties:
      RoleName: EMR_EC2_DefaultRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  EMREC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: CreateRoles
    Properties:
      InstanceProfileName: EMR_EC2_DefaultRole
      Roles:
        - !Ref EMREC2Role

  # ----------- SECURITY GROUP ------------
  EMRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and Spark UIs
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0   # ⚠️ Restrict in production

  # ----------- EMR CLUSTER ------------
  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: !Ref ClusterName
      ReleaseLabel: emr-7.10.0
      Applications:
        - Name: Spark
        - Name: JupyterEnterpriseGateway
      VisibleToAllUsers: true
      JobFlowRole: !If [CreateRoles, !Ref EMREC2InstanceProfile, !Ref ExistingInstanceProfile]
      ServiceRole: !If [CreateRoles, !Ref EMRServiceRole, !Ref ExistingServiceRole]
      ScaleDownBehavior: TERMINATE_AT_TASK_COMPLETION
      Instances:
        Ec2SubnetId: !Ref SubnetId
        EmrManagedMasterSecurityGroup: !Ref EMRSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref EMRSecurityGroup
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: m7a.xlarge
          Market: ON_DEMAND
        CoreInstanceGroup:
          InstanceCount: 2
          InstanceType: m7a.xlarge
          Market: ON_DEMAND
        KeepJobFlowAliveWhenNoSteps: true
        TerminationProtected: false

Outputs:
  ClusterId:
    Description: EMR Cluster ID
    Value: !Ref EMRCluster
  MasterDNS:
    Description: Public DNS of EMR Master Node
    Value: !GetAtt EMRCluster.MasterPublicDNS
